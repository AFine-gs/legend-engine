// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::fct::tests::collection::*;
import meta::pure::fct::*;
import meta::pure::runtime::*;
import meta::relational::tests::mapping::groupBy::model::store::*;
import meta::pure::fct::tests::collection::*;
import meta::pure::test::fct::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::relational::fct::*;

function <<MappingFeature.crossStore, meta::pure::test::fct::model::FCT.testCollection>> meta::relational::tests::fct::mapping::crossstore::testcrossstoreMapping():FCTMappingTest[1] 
{
 ^FCTMappingTest(setupData = [ ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::fct::store::FirmDB,path='/core_relational/relational/tests/fct/xStore/setup2.csv'),
                                ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::fct::store::PersonDB,path='/core_relational/relational/tests/fct/xStore/setup1.csv')
                             ],
                 mapping =  meta::relational::tests::mapping::crossStore::model::mapping::fct::crossStoreTestMapping,
                assertions = [^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::distinct::distinctTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::drop::dropTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::exists::existsRecursiveTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"Joe"}}'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterAssociationIsEmptyGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"John"}}'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterAssociationIsEmptyTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName,legalName\nJohn,Firm D\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>], legalName: [FIRM.LEGAL_NAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"Joe"}}'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::filter::filterTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::first::firstTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::groupBy::groupByTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='name,cnt\nJoe,1\nJohn,1\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[cnt: [PERSON.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::slice::sliceTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::sort::sortAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Firm','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::sort::sortTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::fct::TestAssertion(tests=meta::pure::fct::tests::collection::take::takeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::fct::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::fct::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::fct::tests::collection::Person','pack_meta::pure::fct::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]'))]
           
            );

}



###Mapping
import meta::pure::fct::tests::collection::*;
import meta::relational::tests::mapping::crossStore::model::mapping::fct::store::*;
Mapping meta::relational::tests::mapping::crossStore::model::mapping::fct::crossStoreTestMapping
(


      Person[person]: Relational
    {
       scope([PersonDB]TEST.PERSON)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
            address(
            street:STREET
          ),
          +FIRM_IDFk: Integer[1]: FIRM_ID

       )  
    }


    Firm[firm]: Relational
    {
       legalName: [FirmDB]FIRMSCHEMA.FIRM.LEGAL_NAME,
       optionalDescription: [FirmDB]FIRMSCHEMA.FIRM.OPTIONAL_DESCRIPTION,
      +FIRM_ID: Integer[1]: [FirmDB]FIRMSCHEMA.FIRM.ID


    }

    PersonFirm: XStore
  {
    firm[person, firm]: $this.FIRM_IDFk == $that.FIRM_ID,
    employees[firm, person]: $this.FIRM_ID ==  $that.FIRM_IDFk
  }

)


###Relational

Database meta::relational::tests::mapping::crossStore::model::mapping::fct::store::FirmDB
(
    Schema FIRMSCHEMA
    (
    

    Table FIRM
    (
       ID INT PRIMARY KEY,
       LEGAL_NAME VARCHAR(20),
       OPTIONAL_DESCRIPTION VARCHAR(20)

    )

    )

)

###Relational
Database meta::relational::tests::mapping::crossStore::model::mapping::fct::store::PersonDB
(
    Schema TEST
    (
    Table PERSON
    (
        ID INT PRIMARY KEY,
        FIRSTNAME VARCHAR(20),
        LASTNAME VARCHAR(20),
        FIRM_ID INT,
        BIRTHDATE DATE,
        STREET VARCHAR(20)

    )

    )

)
