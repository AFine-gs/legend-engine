import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import org.finos.legend.engine.plan.execution.stores.relational.result.RelationalResult;
import org.finos.legend.engine.plan.execution.stores.relational.serialization.RelationalResultToJsonDefaultSerializer;

public class RelationalResultToJsonDefaultSerializerTest {

    @Test
    public void testStream() throws SQLException {
        // Set up the test data
        List<List<Object>> testData = new ArrayList<>();
        testData.add(List.of("John Doe", 30, "john.doe@example.com"));
        testData.add(List.of("Jane Smith", 25, "jane.smith@example.com"));

        // Create a mock ResultSet with the test data
        ResultSet resultSet = createMockResultSet(testData);

        // Create a RelationalResult object using the mock ResultSet
        RelationalResult relationalResult = new RelationalResult(resultSet);

        // Serialize the RelationalResult to JSON
        RelationalResultToJsonDefaultSerializer serializer = new RelationalResultToJsonDefaultSerializer(relationalResult);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        serializer.stream(outputStream);
        String json = outputStream.toString();

        // Assert the expected JSON output
        String expectedJson = "{\"builder\":null,\"generationInfo\":null,\"activities\":[],\"result\":{\"columns\":[\"name\",\"age\",\"email\"],\"rows\":[{\"values\":[\"John Doe\",30,\"john.doe@example.com\"]},{\"values\":[\"Jane Smith\",25,\"jane.smith@example.com\"]}]}}";
        Assert.assertEquals(expectedJson, json);
    }

    private ResultSet createMockResultSet(List<List<Object>> testData) throws SQLException {
        ResultSet resultSet = Mockito.mock(ResultSet.class);
        ResultSetMetaData metaData = Mockito.mock(ResultSetMetaData.class);
        
        // Set up the column count
        int columnCount = testData.get(0).size();
        Mockito.when(metaData.getColumnCount()).thenReturn(columnCount);

        // Set up the ResultSet metadata
        Mockito.when(resultSet.getMetaData()).thenReturn(metaData);

        // Set up the row data
        for (List<Object> rowData : testData) {
            Mockito.when(resultSet.next()).thenReturn(true);
            for (int i = 1; i <= columnCount; i++) {
                Mockito.when(resultSet.getObject(i)).thenReturn(rowData.get(i - 1));
            }
        }
        Mockito.when(resultSet.next()).thenReturn(false);

        return resultSet;
    }
}