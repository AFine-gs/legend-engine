// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::analytics::lineage::*;
import meta::pure::extension::*;
import meta::relational::metamodel::relation::*;
import meta::pure::store::*;
import meta::pure::lineage::scanProperties::*;
import meta::pure::router::metamodel::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::metamodel::relation::*;
import meta::analytics::lineage::scanRelationAccessor::*;
import meta::pure::lineage::scanProperties::propertyTree::*;


function meta::analytics::lineage::scanRelationAccessor::extractRelationElementAccessor(vs: ValueSpecification[*], debug:DebugContext[1]):RelationElementAccessor<Any>[*]
{
  print(if($debug.debug,|$debug.space+'>>> extractRelationElementAccessor: ' + ' \n',|''));
  let res = $vs->map( v | $v ->match([
                fe: FunctionExpression[1]                | $fe.parametersValues->evaluateAndDeactivate()->at(0)->cast(@ValueSpecification)->extractRelationElementAccessor($debug);,
                i:  InstanceValue[1]                     | $i.values->evaluateAndDeactivate()->map( v |
                                                                $v->match([
                                                                    r: RelationElementAccessor<Any>[1] | $r,
                                                                    a: Any[1]                          | [];
                                                              ])),
                a: Any[*]                                | print(if($debug.debug,|$debug.space+' Unknown type' + ' \n',|'')); [];
            ]));
  $res;
}

function meta::pure::lineage::scanRelationAccessor::propertyTree::buildRelationAccessorPropertyTreeLineageColumn(columns:meta::analytics::lineage::Column[*]):PropertyPathTree[1]
{
   let filteredColumnLists = $columns->filter(c|$c->isNotEmpty());
   let propertyTree = ^PropertyPathTree(display='root',
                                        value='root',
                                        children = $filteredColumnLists->map(c | ^PropertyPathTree(display=$c.name->toOne(), value=$c))
                                       );
}

function meta::pure::lineage::scanRelationAccessor::propertyTree::buildRelationAccessorPropertyTree(columns:meta::relational::metamodel::Column[*]):PropertyPathTree[1]
{
   let filteredColumnLists = $columns->filter(c|$c->isNotEmpty());
   let propertyTree = ^PropertyPathTree(display='root',
                                        value='root',
                                        children = $filteredColumnLists->map(c | ^PropertyPathTree(display=$c.name->toOne(), value=$c))
                                       );
}

function meta::analytics::lineage::scanRelationAccessor::scanRelationAccessorColumns(vs: Any[1], r: RelationElementAccessor<Any>[*]):meta::relational::metamodel::Column[*]
{
  
  $vs->match([
              f:FunctionDefinition<Any>[1]             | $f.expressionSequence->evaluateAndDeactivate()->map(e|$e->scanRelationAccessorColumns($r)),
              fe:FunctionExpression[1]                 | $fe.func->evaluateAndDeactivate()->scanRelationAccessorColumns($r),
              i:InstanceValue[1]                       | $i.values->evaluateAndDeactivate()->map(a|$a->scanRelationAccessorColumns($r)),
              p:meta::pure::metamodel::relation::Column<Nil,Any|*>[1]  |$r.sourceElement->cast(@Table).columns->cast(@meta::relational::metamodel::Column)->filter(rac|$rac.name == $p.name),
              a:Any[*]                                 |   [];
            ]);
}

function meta::analytics::lineage::scanRelationAccessor::scanRelationAccessorColumns(vs: Any[1], r: RelationElementAccessor<Any>[1], extension:LineageExtension[*]):meta::analytics::lineage::Column[*]
{
  $vs->match([
              f:FunctionDefinition<Any>[1]             | $f.expressionSequence->evaluateAndDeactivate()->map(e|$e->scanRelationAccessorColumns($r,$extension)),
              fe:FunctionExpression[1]                 | $fe.func->evaluateAndDeactivate()->scanRelationAccessorColumns($r,$extension),
              i:InstanceValue[1]                       | $i.values->evaluateAndDeactivate()->map(a|$a->scanRelationAccessorColumns($r,$extension)),
              p:meta::pure::metamodel::relation::Column<Nil,Any|*>[1]  |   $r->match( $extension.accessorToColumn->map(a|$a->eval($p,$r)
                                                                        )->concatenate(rea:RelationElementAccessor<Any>[*]| $r.sourceElement->cast(@Table).columns->cast(@meta::relational::metamodel::Column)->filter(rac|$rac.name == $p.name)->map(c|$c->lineageColumn()))->toOneMany()),
              a:Any[*]                                 |   [];
            ]);
}

function meta::analytics::lineage::scanRelationAccessor::relationColumns(vs: Any[1]):meta::pure::metamodel::relation::Column<Nil,Any|*>[*]
{
  $vs->match([
              f:FunctionDefinition<Any>[1]             | $f.expressionSequence->evaluateAndDeactivate()->map(e|$e->relationColumns()),
              fe:FunctionExpression[1]                 | $fe.func->evaluateAndDeactivate()->relationColumns(),
              i:InstanceValue[1]                       | $i.values->evaluateAndDeactivate()->map(a|$a->relationColumns()),
              p:meta::pure::metamodel::relation::Column<Nil,Any|*>[*]  |  $p,
              a:Any[*]                                 |   [];
            ]);
}


function meta::analytics::lineage::scanRelationAccessor::lineageColumn(c:meta::relational::metamodel::Column[1]):meta::analytics::lineage::Column[1]
{
        ^meta::analytics::lineage::Column
        (
            database = $c.owner->match([t:Table[1]|$t.schema.database.name, v:View[1]|$v.schema.database.name])->toOne(),
            schema = $c.owner->match([t:Table[1]|$t.schema.name, v:View[1]|$v.schema.name])->toOne(),
            table = $c.owner->match([t:Table[1]|$t.name, v:View[1]|$v.name])->toOne(),
            name = $c.name
        )

}


